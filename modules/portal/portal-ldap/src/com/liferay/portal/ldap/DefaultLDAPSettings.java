/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ldap;

import java.util.Properties;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import com.liferay.portal.kernel.ldap.LDAPUtil;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.log.LogUtil;
import com.liferay.portal.kernel.util.PropertiesUtil;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.ldap.configuration.LDAPIntegrationConfigurationRegistry;
import com.liferay.portal.ldap.configuration.LDAPServerConfigurationRegistry;
import com.liferay.portal.model.User;
import com.liferay.portal.security.ldap.LDAPSettings;
import com.liferay.portal.service.UserLocalServiceUtil;

/**
 * @author Edward Han
 * @author Michael C. Han
 * @author Brian Wing Shun Chan
 * @author Milen Dyankov
 */
@Component(
	immediate = true, service = LDAPSettings.class
)
public class DefaultLDAPSettings implements LDAPSettings {

	@Override
	public String getAuthSearchFilter(
			long ldapServerId, long companyId, String emailAddress,
			String screenName, String userId)
		throws Exception {

		
		String filter = _ldapServerConfigurationRegistry.getConfiguration(companyId, ldapServerId).filter();

		if (_log.isDebugEnabled()) {
			_log.debug("Search filter before transformation " + filter);
		}

		filter = StringUtil.replace(
			filter,
			new String[] {
				"@company_id@", "@email_address@", "@screen_name@", "@user_id@"
			},
			new String[] {
				String.valueOf(companyId), emailAddress, screenName, userId
			});

		LDAPUtil.validateFilter(filter);

		if (_log.isDebugEnabled()) {
			_log.debug("Search filter after transformation " + filter);
		}

		return filter;
	}

	@Override
	public Properties getContactExpandoMappings(
			long ldapServerId, long companyId)
		throws Exception {

		Properties contactExpandoMappings = PropertiesUtil.load(
			_ldapServerConfigurationRegistry.getConfiguration(
				companyId, ldapServerId).contactCustomMappings());

		LogUtil.debug(_log, contactExpandoMappings);

		return contactExpandoMappings;
	}

	@Override
	public Properties getContactMappings(long ldapServerId, long companyId)
		throws Exception {

		Properties contactMappings = PropertiesUtil.load(
			_ldapServerConfigurationRegistry.getConfiguration(
				companyId, ldapServerId).contactMappings());

		LogUtil.debug(_log, contactMappings);

		return contactMappings;
	}

	@Override
	public Properties getGroupMappings(long ldapServerId, long companyId)
		throws Exception {

		Properties groupMappings = PropertiesUtil.load(
			_ldapServerConfigurationRegistry.getConfiguration(
				companyId, ldapServerId).groupMappings());

		LogUtil.debug(_log, groupMappings);

		return groupMappings;
	}

	@Override
	public long getPreferredLDAPServerId(long companyId, String screenName) {
		User user = UserLocalServiceUtil.fetchUserByScreenName(
			companyId, screenName);

		if (user == null) {
			return -1;
		}

		return user.getLdapServerId();
	}

	@Override
	public String getPropertyPostfix(long ldapServerId) {
		/* 
		 * TODO this method should be removed 
		 * but currently UI layer and million other things
		 * depend on it through LDAPSettingsUtil ! 
		 */
		return StringPool.PERIOD + ldapServerId;
	}

	@Override
	public Properties getUserExpandoMappings(long ldapServerId, long companyId)
		throws Exception {

		Properties userExpandoMappings = PropertiesUtil.load(
			_ldapServerConfigurationRegistry.getConfiguration(
				companyId, ldapServerId).userCustomMappings());

		LogUtil.debug(_log, userExpandoMappings);

		return userExpandoMappings;
	}

	@Override
	public Properties getUserMappings(long ldapServerId, long companyId)
		throws Exception {

		Properties userMappings = PropertiesUtil.load(
			_ldapServerConfigurationRegistry.getConfiguration(
				companyId, ldapServerId).userMappings());

		LogUtil.debug(_log, userMappings);

		return userMappings;
	}

	@Override
	public boolean isExportEnabled(long companyId) {

		if (isImportEnabled(companyId) &&
				_ldapIntegrationConfigurationRegistry.getConfiguration(companyId).importUserPasswordAutogenerated()) {

			return false;
		}

		return _ldapIntegrationConfigurationRegistry.getConfiguration(companyId).exportEnabled();
	}

	@Override
	public boolean isExportGroupEnabled(long companyId) {

		return _ldapIntegrationConfigurationRegistry.getConfiguration(companyId).exportGroupEnabled();
	}

	@Override
	public boolean isImportEnabled(long companyId) {

		return _ldapIntegrationConfigurationRegistry.getConfiguration(companyId).importEnabled();
	}

	@Override
	public boolean isImportOnStartup(long companyId) {
		
		return _ldapIntegrationConfigurationRegistry.getConfiguration(companyId).importOnStartup();
	}

	@Override
	public boolean isPasswordPolicyEnabled(long companyId) {
		
		return _ldapIntegrationConfigurationRegistry.getConfiguration(companyId).passwordPolicyEnabled();
	}

	@Reference
	protected void setLdapIntegrationConfig(LDAPIntegrationConfigurationRegistry configurationRegistry) {
		_ldapIntegrationConfigurationRegistry = configurationRegistry;
	}

	@Reference
	protected void setLdapServerConfig(LDAPServerConfigurationRegistry configurationRegistry) {
		_ldapServerConfigurationRegistry = configurationRegistry;
	}
	
	private static final Log _log = LogFactoryUtil.getLog(
		DefaultLDAPSettings.class);

	private volatile LDAPIntegrationConfigurationRegistry _ldapIntegrationConfigurationRegistry;
	private volatile LDAPServerConfigurationRegistry _ldapServerConfigurationRegistry;

}